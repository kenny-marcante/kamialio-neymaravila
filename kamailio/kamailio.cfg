#!KAMAILIO

#!define WITH_PGSQL
#!define WITH_AUTH
#!define WITH_NAT
#!define WITH_USRLOCDB
#!define WITH_ASTERISKPBX
#!define WITH_MULTIDOMAIN
#!define WITH_ANTIFLOOD
#!define WITH_TLS
#!define WITH_WEBSOCKETS
#!define WITH_RTPENGINE


####### Include Local Config If Exists #########
import_file "kamailio-local.cfg"

####### Defined Values #########

# *** Value defines - IDs used later in config
#!ifdef WITH_PGSQL
# - database URL - used to connect to database server by modules such
#       as: auth_db, acc, usrloc, a.s.o.
#!ifndef DBURL
#!define DBURL "postgres://kamailio:kamailiorw@localhost/kamailio"
#!endif
#!endif
#!ifdef WITH_MULTIDOMAIN
# - the value for 'use_domain' parameters
#!define MULTIDOMAIN 1
#!else
#!define MULTIDOMAIN 0
#!endif

# - flags
#   FLT_ - per transaction (message) flags
#	FLB_ - per branch flags
#!define FLT_ACC 1
#!define FLT_ACCMISSED 2
#!define FLT_ACCFAILED 3
#!define FLT_NATS 5

#!define FLB_NATB 6
#!define FLB_NATSIPPING 7


#!define FLB_RTPWS 8
#!define FLB_BRIDGE 11


####### Global Parameters #########

### LOG Levels: 3=DBG, 2=INFO, 1=NOTICE, 0=WARN, -1=ERR
#!ifdef WITH_DEBUG
debug=4
log_stderror=yes
#!else
debug=2
log_stderror=no
#!endif

memdbg=5
memlog=5

log_facility=LOG_LOCAL0
log_prefix="{$mt $hdr(CSeq) $ci} "

/* number of SIP routing processes for each UDP socket
 * - value inherited by tcp_children and sctp_children when not set explicitely */
children=2

/* uncomment the next line to disable TCP (default on) */
# disable_tcp=yes

/* number of SIP routing processes for all TCP/TLS sockets */
tcp_children=2

/* uncomment the next line to disable the auto discovery of local aliases
 * based on reverse DNS on IPs (default on) */


mhomed=1
auto_aliases=no
server_id=3
server_signature=no
sip_warning=0
tcp_accept_no_cl=yes

/* add local domain aliases */


listen=udp:KAMAILIO_IP_INTERNO:5060 advertise KAMAILIO_IP_EXTERNO:5060
listen=tcp:KAMAILIO_IP_INTERNO:5060 advertise KAMAILIO_IP_EXTERNO:5060
listen=tls:KAMAILIO_IP_INTERNO:5061 advertise KAMAILIO_IP_EXTERNO:5061
listen=tcp:KAMAILIO_IP_INTERNO:8443 advertise KAMAILIO_IP_EXTERNO:8443
listen=udp:KAMAILIO_IP_INTERNO:5060

tcp_connection_lifetime=3605

tcp_max_connections=2048

#!ifdef WITH_TLS
enable_tls=yes

tls_max_connections=2048
#!endif



####### Modules Section ########

/* set paths to location of modules */
# mpath="/usr/lib64/kamailio/modules/"

#!ifdef WITH_PGSQL
loadmodule "db_postgres.so"
#!endif


loadmodule "jsonrpcs.so"
loadmodule "kex.so"
loadmodule "corex.so"
loadmodule "tm.so"
loadmodule "tmx.so"
loadmodule "sl.so"
loadmodule "rr.so"
loadmodule "pv.so"
loadmodule "maxfwd.so"
loadmodule "usrloc.so"
loadmodule "registrar.so"
loadmodule "textops.so"
loadmodule "siputils.so"
loadmodule "xlog.so"
loadmodule "sanity.so"
loadmodule "ctl.so"
loadmodule "cfg_rpc.so"
loadmodule "acc.so"
loadmodule "counters.so"

loadmodule "outbound.so"
loadmodule "stun.so"
#!ifdef WITH_AUTH
loadmodule "auth.so"
loadmodule "auth_db.so"
#!ifdef WITH_IPAUTH
loadmodule "permissions.so"
#!endif
#!endif

#!ifdef WITH_ALIASDB
loadmodule "alias_db.so"
#!endif

#!ifdef WITH_SPEEDDIAL
loadmodule "speeddial.so"
#!endif

#!ifdef WITH_MULTIDOMAIN
loadmodule "domain.so"
#!endif

#!ifdef WITH_PRESENCE
loadmodule "presence.so"
loadmodule "presence_xml.so"
#!endif

#!ifdef WITH_NAT
loadmodule "nathelper.so"
loadmodule "rtpengine.so"
#!endif

#!ifdef WITH_TLS
loadmodule "tls.so"
#!endif

#!ifdef WITH_ANTIFLOOD
loadmodule "htable.so"
loadmodule "pike.so"
#!endif

#!ifdef WITH_XMLRPC
loadmodule "xmlrpc.so"
#!endif

#!ifdef WITH_DEBUG
loadmodule "debugger.so"
#!endif


#!ifdef WITH_ASTERISKPBX
loadmodule "uac.so"
#!endif

loadmodule "topoh.so"
loadmodule "jansson.so"
loadmodule "sdpops.so"
loadmodule "xhttp.so"


#!ifdef WITH_WEBSOCKETS
loadmodule "websocket.so"
#!endif


loadmodule "ipops.so"
loadmodule "dialog.so"

#!ifdef WITH_HOMER
loadmodule "siptrace.so"
#!endif


modparam("topoh", "mask_key", "kamailio")
modparam("topoh", "mask_ip", "10.10.10.1")


# ----- jsonrpcs params -----
modparam("jsonrpcs", "pretty_format", 1)
modparam("jsonrpcs", "transport",0)
/* set the path to RPC fifo control file */
modparam("jsonrpcs", "fifo_name", "/var/run/kamailio/kamailio_rpc.fifo")
# modparam("jsonrpcs", "fifo_name", "/var/run/kamailio/kamailio_rpc.fifo")
/* set the path to RPC unix socket control file */
# modparam("jsonrpcs", "dgram_socket", "/var/run/kamailio/kamailio_rpc.sock")
modparam("jsonrpcs", "dgram_socket", "udp:127.0.0.1:8090")

# ----- ctl params -----
/* set the path to RPC unix socket control file */

modparam("ctl", "binrpc_max_body_size", 2048)
modparam("ctl", "binrpc_struct_max_body_size", 2048)
# modparam("ctl", "binrpc", "unix:/var/run/kamailio/kamailio_ctl")

# ----- sanity params -----
modparam("sanity", "autodrop", 0)

# ----- tm params -----
# auto-discard branches from previous serial forking leg
modparam("tm", "failure_reply_mode", 3)
# default retransmission timeout: 30sec
modparam("tm", "fr_timer", 30000)
# default invite retransmission timeout after 1xx: 120sec
modparam("tm", "fr_inv_timer", 120000)

# ----- rr params -----
# set next param to 1 to add value to ;lr param (helps with some UAs)
modparam("rr", "enable_full_lr", 1)
# do not append from tag to the RR (no need for this script)

#!ifdef WITH_ASTERISKPBX
modparam("rr", "append_fromtag", 1)
#!else
modparam("rr", "append_fromtag", 0)
#!endif
modparam("rr", "enable_double_rr", 2)
# ----- registrar params -----
modparam("registrar", "method_filtering", 1)
/* uncomment the next line to disable parallel forking via location */
# modparam("registrar", "append_branches", 0)
/* uncomment the next line not to allow more than 10 contacts per AOR */
modparam("registrar", "max_contacts", 10)
/* max value for expires of registrations */
modparam("registrar", "max_expires", 3600)
/* set it to 1 to enable GRUU */
modparam("registrar", "gruu_enabled", 0)

# ----- acc params -----
/* what special events should be accounted ? */
modparam("acc", "early_media", 0)
modparam("acc", "report_ack", 0)
modparam("acc", "report_cancels", 0)
/* by default ww do not adjust the direct of the sequential requests.
 * if you enable this parameter, be sure the enable "append_fromtag"
 * in "rr" module */
modparam("acc", "detect_direction", 0)
/* account triggers (flags) */
modparam("acc", "log_flag", FLT_ACC)
modparam("acc", "log_missed_flag", FLT_ACCMISSED)
modparam("acc", "log_extra",
	"src_user=$fU;src_domain=$fd;src_ip=$si;"
	"dst_ouser=$tU;dst_user=$rU;dst_domain=$rd")
modparam("acc", "failed_transaction_flag", FLT_ACCFAILED)
/* enhanced DB accounting */
#!ifdef WITH_ACCDB
modparam("acc", "db_flag", FLT_ACC)
modparam("acc", "db_missed_flag", FLT_ACCMISSED)
modparam("acc", "db_url", DBURL)
modparam("acc", "db_extra",
	"src_user=$fU;src_domain=$fd;src_ip=$si;"
	"dst_ouser=$tU;dst_user=$rU;dst_domain=$rd")
#!endif

# ----- usrloc params -----
/* enable DB persistency for location entries */
#!ifdef WITH_USRLOCDB
modparam("usrloc", "db_url", DBURL)
modparam("usrloc", "db_mode", 2)
modparam("usrloc", "use_domain", MULTIDOMAIN)
modparam("usrloc", "db_insert_update", 1)
#!endif

# ----- auth_db params -----
#!ifdef WITH_AUTH
modparam("auth_db", "db_url", DBURL)
modparam("auth_db", "calculate_ha1", 0)
modparam("auth_db", "user_column", "numero")
modparam("auth_db", "password_column", "senha")
modparam("auth_db", "domain_column", "dominio")
modparam("auth_db", "use_domain", MULTIDOMAIN)
modparam("auth_db", "version_table", 0)
# ----- permissions params -----
#!ifdef WITH_IPAUTH
modparam("permissions", "db_url", DBURL)
modparam("permissions", "db_mode", 1)
#!endif

#!endif

# ----- alias_db params -----
#!ifdef WITH_ALIASDB
modparam("alias_db", "db_url", DBURL)
modparam("alias_db", "use_domain", 1)
#!endif

# ----- speeddial params -----
#!ifdef WITH_SPEEDDIAL
modparam("speeddial", "db_url", DBURL)
modparam("speeddial", "use_domain", MULTIDOMAIN)
#!endif

# ----- domain params -----
#!ifdef WITH_MULTIDOMAIN
modparam("domain", "db_url", DBURL)
modparam("domain", "domain_table", "vw_kamailio_domain")
modparam("domain", "domain_col", "dominio")
/* register callback to match myself condition with domains list */
modparam("domain", "register_myself", 1)
#!endif

#!ifdef WITH_PRESENCE
# ----- presence params -----
modparam("presence", "db_url", DBURL)

# ----- presence_xml params -----
modparam("presence_xml", "db_url", DBURL)
modparam("presence_xml", "force_active", 1)
#!endif

#!ifdef WITH_NAT
# ----- rtpproxy params -----
modparam("rtpengine", "rtpengine_sock", "udp:127.0.0.1:2223")
modparam("rtpengine", "extra_id_pv", "$avp(extra_id)")

# ----- nathelper params -----
modparam("nathelper", "natping_interval", 30)
modparam("nathelper", "ping_nated_only", 1)
modparam("nathelper", "sipping_bflag", FLB_NATSIPPING)
modparam("nathelper", "sipping_from", "sip:sbc@dominio.com.br")

# params needed for NAT traversal in other modules
modparam("nathelper|registrar", "received_avp", "$avp(RECEIVED)")
modparam("usrloc", "nat_bflag", FLB_NATB)
#!endif

#!ifdef WITH_TLS
# ----- tls params -----
modparam("tls", "config", "/etc/kamailio/tls.cfg")
#!endif

#!ifdef WITH_ANTIFLOOD
# ----- pike params -----
modparam("pike", "sampling_time_unit", 2)
modparam("pike", "reqs_density_per_unit", 16)
modparam("pike", "remove_latency", 4)

# ----- htable params -----
/* ip ban htable with autoexpire after 5 minutes */
modparam("htable", "db_url", "postgres://kamailio:kamailiorw@localhost/kamailio")
modparam("htable", "htable", "ipban=>size=8;autoexpire=300")
modparam("htable", "htable", "ramal=>size=8;dbtable=vw_kamailio_server")
#!endif

#!ifdef WITH_XMLRPC
# ----- xmlrpc params -----
modparam("xmlrpc", "route", "XMLRPC");
modparam("xmlrpc", "url_match", "^/RPC")
#!endif

#!ifdef WITH_DEBUG
# ----- debugger params -----
modparam("debugger", "cfgtrace", 1)
modparam("debugger", "log_level_name", "exec")
#!endif


####### Routing Logic ########

#!ifdef WITH_WEBSOCKETS
event_route[xhttp:request] {
        xlog("L_INFO", "Requisicao HTTP Recebida\n");

    if ( $Rp != 8443 ) {
        if ($hu =~ "^/RPC") {
                jsonrpc_dispatch();
        } else {
                xhttp_reply("200", "OK", "text/html", "<html><body>Wrong URL $hu</body></html>");
        }
        exit;
    } else {

    xlog("L_ERR", "[xhttp:request] Antes do Upgrade 'Upgrade'\n");
        if ( $hdr(Upgrade) =~ "websocket" && $hdr(Connection) =~ "Upgrade" && $rm =~ "GET" ) {
        xlog("L_WARN", "[xhttp:request] Upgrade para Websocket");
                if ($hdr(Host) == $null || !is_myself("sip:" + $hdr(Host))) {
                        xlog("L_WARN", "Bad host $hdr(Host)\n");
                        xhttp_reply("403", "Forbidden", "", "");
                        exit;
                }

                if (ws_handle_handshake()) {
                        exit;
                }
        }

}
        xhttp_reply("404", "Not Found", "", "");
}
#!endif


#!ifdef WITH_WEBSOCKETS
event_route[websocket:closed] {
        xlog("L_INFO", "WebSocket connection from $si:$sp has closed\n");
}
#!endif


event_route[htable:expired:ipban] {
    xlog("L_INFO","IP DESBLOQUEADO: $shtrecord(key) => $shtrecord(value)\n");
}


request_route {

	route(REQINIT);
 
	route(NATDETECT);
 
	route(WITHINDLG);
 
	if (is_method("CANCEL"))
	{
		if (t_check_trans())
			t_relay();
		exit;
	}
 
	t_check_trans();
 
	route(AUTH);
 
	remove_hf("Route");
	if (is_method("INVITE|SUBSCRIBE"))
		record_route();
 
	if (is_method("INVITE"))
	{

	#!ifdef WITH_RTPENGINE
		route(SET_TIPO_CHAMADA);
	#!endif
		setflag(FLT_ACC);
	}
 
	route(SIPOUT);
 
	route(PRESENCE);
 
	route(REGISTRAR);
 
	if ($rU==$null)
	{
		sl_send_reply("484","Address Incomplete");
		exit;
	}
 
	route(LOCATION);

	route(RELAY);
}
 
 
route[RELAY] {

        if (is_method("INVITE|SUBSCRIBE")) {
                t_on_branch("MANAGE_BRANCH");
                t_on_reply("MANAGE_REPLY");
        }
        if (is_method("INVITE")) {
                t_on_failure("MANAGE_FAILURE");
        }

#!ifdef WITH_RTPENGINE
        route(RTPENGINE);
#!endif


        if (!t_relay()) {
                sl_reply_error();
        }
        exit;
} 

route[REQINIT] {
	if(route(FROMASTERISKPBX)){
		return;
	}

#!ifdef WITH_ANTIFLOOD
	if(src_ip!=myself)
	{
		if($sht(ipban=>$si)!=$null)
		{
			# ip is already blocked
			xdbg("request from blocked IP - $rm from $fu (IP:$si:$sp)\n");
			exit;
		}
		if (!pike_check_req())
		{
			xlog("L_ALERT","ALERT: pike blocking $rm from $fu (IP:$si:$sp)\n");
			//$sht(ipban=>$si) = 1;
			exit;
		}
	}
#!endif

		if (!is_domain_local("$fd")&&(!route(FROMASTERISKPBX))) {
			xlog("L_INFO","BLOQUEIO: $si\n ANO E DOMINIO AUTORIZADO OU IP ASTERISK $fd $rm from $ua (IP:$si:$sp)");
			sl_send_reply("494", "IP BANNED");
			$sht(ipban=>$si) = 1;
			exit;
		}

                if($ua =~ "friendly-scanner|sipcli|VaxSIPUserAgent|iWar|sipvicious|sipsak|sundayddr|pplsip") {
                        xlog("L_INFO","BLOQUEIO: SCANNER SIP: $rm from $ua (IP:$si:$sp)\n");
                        # silent drop for scanners - uncomment next line if want to reply
                        # sl_send_reply("200", "OK");
                        exit;
                }

                if($sel(contact.uri.host) =~ "^(\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3})$") {
                   xlog("L_INFO","BLOQUEIO: TENTATIVA VINDA DE ACESSO POR IP E NAO POR DNS: (IP:$si:$sp)\n");
                   exit;
                }


                if($au =~ "(\=)|(\-\-)|(')|(\#)|(\%27)|(\%24)" and $au != $null) {
                   xlog("L_INFO","BLOQUEIO: SQL INJECTION: (IP:$si:$sp)");
                   exit;
                }

                if($(hdr(Record-Route)[0]{nameaddr.uri}) != $si and $(hdr(Record-Route)[0]{nameaddr.uri}) != $null) {
                   xlog("L_INFO","BLOQUEIO: ATAQUE SPOOFING: (IP:$si:$sp)");
                   exit;
                }
 
	if (!mf_process_maxfwd_header("10")) {
		sl_send_reply("483","Too Many Hops");
		exit;
	}
 
	if(!sanity_check("1511", "7"))
	{
		xlog("Malformed SIP message from $si:$sp\n");
		exit;
	}
}
 
# Handle requests within SIP dialogs
route[WITHINDLG] {
	if (has_totag()) {
		if (loose_route()) {
			route(DLGURI);
			if (is_method("BYE")) {
				setflag(FLT_ACC); # do accounting ...
				setflag(FLT_ACCFAILED); # ... even if the transaction fails

			}
			if ( is_method("ACK") ) {
				route(NATMANAGE);
			}
			route(RELAY);
		} else {
			if (is_method("SUBSCRIBE") && uri == myself) {
				route(PRESENCE);
				exit;
			}
			if ( is_method("ACK") ) {
				if ( t_check_trans() ) {
					t_relay();
					exit;
				} else {
					exit;
				}
			}
			sl_send_reply("404","Not here");
		}
		exit;
	}
}
 
# Handle SIP registrations
route[REGISTRAR] {
	if (is_method("REGISTER"))
	{
		if(isflagset(FLT_NATS))
		{
			setbflag(FLB_NATB);
			# uncomment next line to do SIP NAT pinging 
			#setbflag(FLB_NATSIPPING);
		}
		if (!save("location"))
			sl_reply_error();

		#!ifdef WITH_ASTERISKPBX
                	route(REGFWD);

		#!endif

		exit;
	}
}

# USER location service
route[LOCATION] {
 
#!ifdef WITH_SPEEDIAL
	if($rU=~"^[0-9][0-9]$")
		if(sd_lookup("speed_dial"))
			route(SIPOUT);
#!endif
 
#!ifdef WITH_ALIASDB
	if(alias_db_lookup("dbaliases"))
		route(SIPOUT);
#!endif
 
#!ifdef WITH_ASTERISKPBX
	if(is_method("INVITE") && (!route(FROMASTERISKPBX))) {
		if ($oP == "tls") {
                        if(!sdp_with_transport("RTP/SAVP")){
                                sl_send_reply("403","OPA. RTP NAO ESTA CRIPTOGRAFADO.");
                                exit;
                        }
                }
		route(TOASTERISKPBX);
		exit;
	}
#!endif
 
	$avp(oexten) = $rU;
	if (!lookup("location")) {
		$var(rc) = $rc;
		t_newtran();
		switch ($var(rc)) {
			case -1:
			case -3:
				send_reply("404", "Not Found");
				exit;
			case -2:
				send_reply("405", "Method Not Allowed");
				exit;
		}
	}
 
	if (is_method("INVITE"))
	{
		setflag(FLT_ACCMISSED);
	}
}
 
route[PRESENCE] {
	if(!is_method("PUBLISH|SUBSCRIBE"))
		return;

#!ifdef WITH_ASTERISKPBX
        if(!route(FROMASTERISKPBX)) {
                route(TOASTERISKPBX);
                exit;
        }
#!endif

 
#!ifdef WITH_PRESENCE
	if (!t_newtran())
	{
		sl_reply_error();
		exit;
	};
 
	if(is_method("PUBLISH"))
	{
		handle_publish();
		t_release();
	}
	else
	if( is_method("SUBSCRIBE"))
	{
		handle_subscribe();
		t_release();
	}
	exit;
#!endif
 
	if (is_method("PUBLISH") || $rU==$null)
	{
		sl_send_reply("404", "Not here");
		exit;
	}
	return;
}
 
route[AUTH] {

 	if (from_uri!=myself && uri!=myself)
	{
		sl_send_reply("403","Not relaying");
		exit;
	}
#!ifdef WITH_AUTH
 
#!ifdef WITH_ASTERISKPBX
	if(route(FROMASTERISKPBX))
		return;
#!endif

#!ifdef WITH_IPAUTH
	if((!is_method("REGISTER")) && allow_source_address())
	{
		# source IP allowed
		return;
	}
#!endif
 
	if (is_method("REGISTER") || from_uri==myself)
	{

#!ifdef WITH_ASTERISKPBX
		if (!auth_check("$fd", "vw_kamailio_users", "1")) {
#!else
		if (!auth_check("$fd", "subscriber", "1")) {
#!endif
			auth_challenge("$fd", "0");
			exit;
		}
		if(!is_method("REGISTER|PUBLISH"))
			consume_credentials();

	}
#!endif
	return;
}
 
route[NATDETECT] {
#!ifdef WITH_NAT
        force_rport();
        if (nat_uac_test("19")) {
                if (is_method("REGISTER")) {
                        fix_nated_register();
                } else {
                        set_contact_alias();
                        //fix_nated_contact();
                }
                setflag(FLT_NATS);
        }
#!endif
        return;
}

 
route[NATMANAGE] {
#!ifdef WITH_NAT
    if (is_request()) {
        if(has_totag()) {
            if(check_route_param("nat=yes")) {
                setbflag(FLB_NATB);
            }
                if (check_route_param("rtp=bridge")) {
                        setbflag(FLB_BRIDGE);
                }

                if (check_route_param("rtp=ws")) {
                        setbflag(FLB_RTPWS);
                }
        }
    }
    if (!(isflagset(FLT_NATS) || isbflagset(FLB_NATB))) return;

    if (is_request()) {
        if (!has_totag()) {
            if(t_is_branch_route()) {
                add_rr_param(";nat=yes");

                if (isbflagset(FLB_RTPWS)) {
                        add_rr_param(";rtp=ws");
                }

            }
        }
    }
    if (is_reply()) {
        if(isbflagset(FLB_NATB)) {
            if(is_first_hop())
                set_contact_alias();
        }


    }
#!endif
    return;
}


route[DLGURI] {
#!ifdef WITH_NAT
    if(!isdsturiset()) {
        handle_ruri_alias();
    }
#!endif
    return;
}
 
route[SIPOUT] {
	if (!uri==myself)
	{
		append_hf("P-hint: outbound\r\n");
		route(RELAY);
	}
}
 
#!ifdef WITH_XMLRPC
route[XMLRPC] {
	if ((method=="POST" || method=="GET"){
		if ($hdr(User-Agent) =~ "xmlrpclib")
			set_reply_close();
		set_reply_no_connect();
		dispatch_rpc();
		exit;
	}
	send_reply("403", "Forbidden");
	exit;
}
#!endif
 
branch_route[MANAGE_BRANCH] {
//	xdbg("new branch [$T_branch_idx] to $ru\n");
	route(BRIDGING);
	route(NATMANAGE);
}
 
onreply_route[MANAGE_REPLY] {
	if(status=~"[12][0-9][0-9]"){
		route(NATMANAGE);
	}
#!ifdef WITH_RTPENGINE
        route(RTPENGINE);
#!endif
	
}
 
failure_route[MANAGE_FAILURE] {
	route(NATMANAGE);
 
	if (t_is_canceled()) {
		exit;
	}
 
#!ifdef WITH_BLOCK3XX
	# block call redirect based on 3xx replies.
	if (t_check_status("3[0-9][0-9]")) {
		t_reply("404","Not found");
		exit;
	}
#!endif
} 
 
#!ifdef WITH_ASTERISKPBX
route[FROMASTERISKPBX] {

	if(sht_has_str_value("ramal", "eq", "$si")) {
		return 1;
        } else{
		return -1;
        }
}
 
route[TOASTERISKPBX] {

	$var(autenticacao) = $fU + "@" + $fd;
	$var(ip_asterisk) = $sht(ramal=>$var(autenticacao));
	$du = "sip:" + $var(ip_asterisk) + ":5060";	
	route(RELAY);
	exit;
}

route[SET_TIPO_CHAMADA]{
        if ( $pr=="wss" || $pr=="WSS" ){
                $dlg_var(call_type) = "wss";
        } else if( $pr=="tls" || $pr=="TLS" ) {
                $dlg_var(call_type) = "tls";
        } else if ( $pr=="tcp" || $pr=="TCP" ){
                $dlg_var(call_type) = "tcp";
        } else {
                $dlg_var(call_type) = "udp";
        }
}

#!ifdef WITH_RTPENGINE
route[SET_DIRECAO_RTP] {
    if (is_ip_rfc1918("$si")) {
        $dlg_var(rtp_direction) = "direction=priv direction=pub";
    } else {
        $dlg_var(rtp_direction) = "direction=pub direction=priv";
    }
}

route[IS_REDE_INTERNA]{
	if (is_ip_rfc1918("$si")) {
		return 1;	
	} else {
		return -1;
	}
}



route[GERAR_PARAMETROS_RTPENGINE] {
	route(SET_DIRECAO_RTP);

	if(!route(IS_REDE_INTERNA)){ //NAO E REDE INTERNA, DESTINO REDE INTERNA
		if($dlg_var(call_type) == "wss"){ //ORIGEM WEBSOCKET -> DESTINO LAN | REMOVER DTLS,SDES e ICE. TRANSPORTE RTP/AVP
			//$var(rtp_param) = "trust-address replace-origin replace-session-connection rtcp-mux-demux DTLS=off SDES-off ICE=remove RTP/AVP " + $dlg_var(rtp_direction);
			$var(rtp_param) = "trust-address replace-origin replace-session-connection rtcp-mux-demux DTLS=off SDES-off RTP/AVP ICE=remove "  + $dlg_var(rtp_direction);
		} else if($dlg_var(call_type) == "tls"){ // TRANSP. TLS -> DESTINO LAN | REMOVER DTLS, SDES E ICE. TRANSPORTE RTP/AVP
			$var(rtp_param) = "rtcp-mux-demux DTLS=off SDES-off RTP/AVP ICE=remove " + $dlg_var(rtp_direction);
		} else if($dlg_var(call_type) == "tcp"){ // TRANSP. TCP -> DESTINO LAN | SUBSTITUIR ORIGEM, SESSION CONNECTION
			$var(rtp_param) = "rtcp-mux-demux replace-origin replace-session-connection ICE=remove DTLS=off SDES-off RTP/AVP " + $dlg_var(rtp_direction);
		} else if($dlg_var(call_type) == "udp"){ // TRANSP. UDP -> DESTINO LAN | 
			$var(rtp_param) = "rtcp-mux-demux replace-origin replace-session-connection ICE=remove DTLS=off SDES-off RTP/AVP " + $dlg_var(rtp_direction);
		} else {
			$var(rtp_param) = "rtcp-mux-demux replace-origin replace-session-connection ICE=remove DTLS=off SDES-off RTP/AVP " + $dlg_var(rtp_direction);
		}
	} else { // ORIGEM REDE INTERNA - DESTINO EXTERNO

		if( ($dlg_var(call_type) == "wss")  || ($ru =~ "transport=ws") || ($ru =~ "transport=wss") ){ //ORIGEM LAN -> DESTINO EXTERNO WSS
			//$var(rtp_param) = "trust-address replace-origin replace-session-connection rtcp-mux-offer ICE=force transcode-PCMU transcode-G722 SDES-off UDP/TLS/RTP/SAVPF " + $dlg_var(rtp_direction);
			$var(rtp_param) = "replace-origin replace-session-connection rtcp-mux-require  DTLS-on SDES-off RTP/SAVPF " + $dlg_var(rtp_direction);

                } else if( ($dlg_var(call_type) == "tls") || ($ru =~ "transport=TLS") || ($ru =~ "transport=tls")  ){ // TRANSP. TLS -> DESTINO EXTERNO
                        $var(rtp_param) = "trust-address replace-origin replace-session-connection RTP/SAVP " + $dlg_var(rtp_direction);
                } else if($dlg_var(call_type) == "tcp"){ // TRANSP. TCP -> DESTINO EXTERNO
                        $var(rtp_param) = "trust-address replace-origin replace-session-connection " + $dlg_var(rtp_direction);
                } else if($dlg_var(call_type) == "udp"){ // TRANSP. UDP -> DESTINO EXTERNO
                        $var(rtp_param) = "trust-address replace-origin replace-session-connection " + $dlg_var(rtp_direction);
                } else {
			$var(rtp_param) = "trust-address replace-origin replace-session-connection " + $dlg_var(rtp_direction);
		}

	}


	//xlog("L_INFO", "[RTPENGINE]: METODO: $rm | STATUS: $rs | PROTOCOLO: PR: $pr DP: $dP OP: $oP RP1: $rp RP2: $rP | RU: $ru | DU: $du | CALLTYPE: $dlg_var(call_type) | DIRECAO: $dlg_var(rtp_direction)]\n");
	xlog("L_INFO", "[RTPENGINE]: PARAMETROS: [$var(rtp_param)]\n");
	rtpengine_manage($var(rtp_param));
}


route[BRIDGING] {
        if (!has_totag()) {
                if ($proto =~ "ws" && !($ru =~ "transport=ws")) { # Coming from WS, NOT to WS
                        setbflag(FLB_RTPWS); # Need bridging
                } else if (!($proto =~ "ws") && $ru =~ "transport=ws") { # Coming from NOT WS, going to WS
                        setbflag(FLB_RTPWS); # Need bridging
                }
        }
}

route[RTPENGINE] {
    if ( is_method("INVITE") ) {
        if ( sdp_content() ) {
 		route(GERAR_PARAMETROS_RTPENGINE);
        }
    }
}
#!endif

route[REGFWD] {
	if(!is_method("REGISTER"))
	{
		return;
	}
	
        $var(autenticacao) = $fU + "@" + $fd;
        $var(ip_asterisk) = $sht(ramal=>$var(autenticacao));

	$uac_req(method)="REGISTER";
	$uac_req(ruri)="sip:" + $var(ip_asterisk) + ":5060";
	$uac_req(furi)="sip:" + $au + "@" + $fd;
	$uac_req(turi)="sip:" + $au + "@" + $var(ip_asterisk);
	$uac_req(hdrs)="Contact: <sip:" + $au + "@"
				+ $fd
				+ ":" + 5060 + ">\r\n";
	if($sel(contact.expires) != $null){
				$uac_req(hdrs)= $uac_req(hdrs) + "Expires: " + $sel(contact.expires) + "\r\n";
		}	else{
				$uac_req(hdrs)= $uac_req(hdrs) + "Expires: " + $hdr(Expires) + "\r\n";
		}


	$uac_req(hdrs)= $uac_req(hdrs) + "User-Agent: " + $ua + "\r\n";
	
	$uac_req(sock)="udp:KAMAILIO_IP_INTERNO:5060";
	uac_req_send();
}
#!endif
